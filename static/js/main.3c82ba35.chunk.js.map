{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","require","config","App","state","searchField","fetch","process","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yTAIaA,G,YAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,YAChF,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,aCHbC,EAAW,SAAAR,GAAK,OAC1B,qBAAKC,UAAU,YAAf,SACID,EAAMS,SAASC,KAAI,SAAAP,GAAO,OACxB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCLfO,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBACIZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,M,MCDlBG,EAAQ,IAAUC,S,IAsDHC,E,kDAlDX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CAETV,SAAS,GAcTW,YAAa,IAlBP,E,gEAsBO,IAAD,OAChBC,MAAMC,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC9BF,MAAK,SAAAG,GAAK,OAAG,EAAKC,SAAS,CAAClB,SAAUiB,S,+BAGjC,IAAD,SAC6BE,KAAKT,MAA/BV,EADH,EACGA,SAAUW,EADb,EACaA,YACZS,EAAmBpB,EAASqB,QAAO,SAAA3B,GAAO,OAC5CA,EAAQG,KAAKyB,cAAcC,SAASZ,EAAYW,kBAGpD,OACI,sBAAK9B,UAAU,MAAf,UACI,iDAEA,cAAC,EAAD,CACIW,YAAY,iBACZC,aAAgB,SAAAoB,GAAC,OAAI,EAAKN,SAAS,CAACP,YAAYa,EAAEC,OAAOC,WAG7D,cAAC,EAAD,CAAU1B,SAAUoB,W,GA7ClBO,aCGHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.3c82ba35.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport './card-style.css'\r\n\r\nexport const Card = props => (\r\n    <div className=\"card-container\">\r\n        <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"monster\" />\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n)","import React from \"react\";\r\n\r\nimport './card-list.style.css';\r\nimport { Card } from \"../card/card.component\";\r\n\r\nexport const CardList = props => (\r\n   <div className='card-list'>\r\n      {props.monsters.map(monster => (\r\n         <Card key={monster.id} monster={monster}/>\r\n      ))}\r\n   </div>\r\n);\r\n","import React from \"react\";\r\nimport './serch-box-style.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <input\r\n        className=\"search\"\r\n        type=\"search\"\r\n        placeholder={placeholder}\r\n        onChange={handleChange}\r\n    />\r\n) ","// import logo from './logo.svg';\r\nimport { Component } from 'react';\r\nimport { CardList } from './components/card-list/card-list.component';\r\nimport { SearchBox } from \"./components/search-box/search-box.component\";\r\n\r\nimport './App.css';\r\n\r\nrequire('dotenv').config()\r\n\r\nclass App extends Component{\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            // string: 'Hello Rofik'\r\n            monsters:[\r\n                // {\r\n                //     name: 'Dracula',\r\n                //     id: 1\r\n                // },\r\n                // {\r\n                //     name: 'Zombie',\r\n                //     id: 2\r\n                // },\r\n                // {\r\n                //     id: 3,\r\n                //     name: 'Crocodile'\r\n                // },\r\n            ],\r\n            searchField: '',\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(process.env.REACT_APP_API_URL + '/users')\r\n            .then(response => response.json())\r\n        .then(users=> this.setState({monsters: users}))\r\n    }\r\n\r\n    render() {\r\n        const { monsters, searchField } = this.state;\r\n        const filteredMonsters = monsters.filter(monster => \r\n            monster.name.toLowerCase().includes(searchField.toLowerCase())\r\n        );\r\n        \r\n        return (\r\n            <div className=\"App\">\r\n                <h1>Monster Rolodex</h1>\r\n\r\n                <SearchBox\r\n                    placeholder=\"search monster\"\r\n                    handleChange = {e => this.setState({searchField:e.target.value})}\r\n                />\r\n                     \r\n                <CardList monsters={filteredMonsters} />\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React  from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}